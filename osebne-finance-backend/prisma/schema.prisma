generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  email           String     @unique @db.VarChar(255)
  passwordHash    String     @map("password_hash") @db.VarChar(255)
  firstName       String     @map("first_name") @db.VarChar(100)
  lastName        String     @map("last_name") @db.VarChar(100)
  defaultCurrency String     @default("EUR") @map("default_currency") @db.Char(3)
  showAmounts     Boolean    @default(true) @map("show_amounts")
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  categories      Category[]
  expenses        Expense[]
  incomes         Income[]
  transfers       Transfer[]
  uploads         Upload[]

  @@map("users")
}

model Category {
  id            Int        @id @default(autoincrement())
  userId        Int        @map("user_id")
  name          String     @db.VarChar(100)
  description   String?
  balance       Decimal    @default(0) @db.Decimal(12, 2)
  isDefault     Boolean    @default(false) @map("is_default")
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expenses      Expense[]
  incomes       Income[]
  transfersFrom Transfer[] @relation("TransferFrom")
  transfersTo   Transfer[] @relation("TransferTo")

  @@unique([userId, name], map: "uq_categories_user_name")
  @@index([userId], map: "idx_categories_user")
  @@map("categories")
}

model Income {
  id              Int            @id @default(autoincrement())
  userId          Int            @map("user_id")
  categoryId      Int            @map("category_id")
  amount          Decimal        @db.Decimal(12, 2)
  currency        String         @default("EUR") @db.Char(3)
  description     String?
  transactionDate DateTime       @default(dbgenerated("CURRENT_DATE")) @map("transaction_date") @db.Date
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  income_uploads  IncomeUpload[]
  category        Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId, categoryId, transactionDate], map: "idx_incomes_user_cat_date")
  @@index([userId, transactionDate], map: "idx_incomes_user_date")
  @@map("incomes")
}

model Expense {
  id              Int             @id @default(autoincrement())
  userId          Int             @map("user_id")
  categoryId      Int             @map("category_id")
  amount          Decimal         @db.Decimal(12, 2)
  currency        String          @default("EUR") @db.Char(3)
  description     String?
  transactionDate DateTime        @default(dbgenerated("CURRENT_DATE")) @map("transaction_date") @db.Date
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  expense_uploads ExpenseUpload[]
  category        Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId, categoryId, transactionDate], map: "idx_expenses_user_cat_date")
  @@index([userId, transactionDate], map: "idx_expenses_user_date")
  @@map("expenses")
}

model Transfer {
  id             Int      @id @default(autoincrement())
  userId         Int      @map("user_id")
  fromCategoryId Int      @map("from_category_id")
  toCategoryId   Int      @map("to_category_id")
  amount         Decimal  @db.Decimal(12, 2)
  currency       String   @default("EUR") @db.Char(3)
  description    String?
  transferDate   DateTime @default(dbgenerated("CURRENT_DATE")) @map("transfer_date") @db.Date
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  fromCategory   Category @relation("TransferFrom", fields: [fromCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toCategory     Category @relation("TransferTo", fields: [toCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([fromCategoryId], map: "idx_transfers_from")
  @@index([toCategoryId], map: "idx_transfers_to")
  @@index([userId, transferDate], map: "idx_transfers_user_date")
  @@map("transfers")
}

model Upload {
  id              Int             @id @default(autoincrement())
  userId          Int             @map("user_id")
  fileName        String          @map("file_name") @db.VarChar(255)
  filePath        String          @map("file_path") @db.VarChar(255)
  fileType        String?         @map("file_type") @db.VarChar(50)
  file_size       Int?
  checksum        String?         @db.VarChar(64)
  uploadedAt      DateTime        @default(now()) @map("uploaded_at") @db.Timestamp(6)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  expense_uploads ExpenseUpload[]
  income_uploads  IncomeUpload[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, filePath], map: "uq_uploads_user_path")
  @@index([userId, uploadedAt], map: "idx_uploads_user_uploaded")
  @@map("uploads")
}

model IncomeUpload {
  income_id Int
  upload_id Int
  incomes   Income @relation(fields: [income_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uploads   Upload @relation(fields: [upload_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([income_id, upload_id])
  @@index([upload_id], map: "idx_income_uploads_upload")
  @@map("income_uploads")
}

model ExpenseUpload {
  expense_id Int
  upload_id  Int
  expenses   Expense @relation(fields: [expense_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uploads    Upload  @relation(fields: [upload_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([expense_id, upload_id])
  @@index([upload_id], map: "idx_expense_uploads_upload")
  @@map("expense_uploads")
}
